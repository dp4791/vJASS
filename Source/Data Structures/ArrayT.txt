library ArrayT uses SetT, Table, Iterator
/*
    
    Array of integers.
    
        Ordered: False
        Unique: False
        Insert: By index/value or value
        Delete: By index
        Access: By index(discontiguous) or iterator
    
    API

        Array
        
            static method create takes nothing returns thistype
            method destroy takes nothing returns nothing
            
            readonly Set indexSet
            readonly integer size
            method operator [] takes integer index returns integer
            method has takes integer value returns boolean
            method hasIndex takes integer index returns boolean
            method getIndex takes integer value returns integer
            method iterator takes nothing returns ArrayIterator
            
            method operator []= takes integer index, integer value returns nothing
            method add takes integer value returns nothing
            method removeIndex takes integer index returns boolean
            method clear takes nothing returns nothing
        
        ArrayIterator
        
            static method create takes Array arr returns thistype
            method destroy takes nothing returns nothing
            
            method hasNext takes nothing returns boolean
            method next takes nothing returns integer
            
            method operator index takes nothing returns integer
        
*/

    struct Array extends array
        implement Alloc
        
        private Table valueList
        readonly Set indexSet
        readonly integer size
        
        method operator []= takes integer index, integer value returns nothing
            set .valueList[index] = value
            
            if .indexSet.add(index) then
                set .size = .size + 1
            endif
        endmethod
        method add takes integer value returns nothing
            local integer index
            
            if .indexSet.size == 0 then
                set index = 0
            else
                set index = .indexSet[indexSet.size - 1] + 1
            endif
            
            set this[index] = value
        endmethod
        method removeIndex takes integer index returns boolean
            if not .indexSet.has(index) then
                return false
            endif
            
            call .indexSet.remove(index)
            call .valueList.remove(index)
            return true
        endmethod
        method clear takes nothing returns nothing
            call .valueList.flush()
            call .indexSet.clear()
            
            set .size = 0
        endmethod
        
        method operator [] takes integer index returns integer
            return .valueList[index]
        endmethod
        method has takes integer value returns boolean
            local integer indexIndex = 0
            
            loop
                exitwhen indexIndex == .indexSet.size
                
                if this[.indexSet[indexIndex]] == value then
                    return true
                endif
                
                set indexIndex = indexIndex + 1
            endloop
            
            return false
        endmethod
        method hasIndex takes integer index returns boolean
            return .indexSet.has(index)
        endmethod
        method getIndex takes integer value returns integer
            local integer indexIndex = 0
            
            loop
                exitwhen indexIndex == .indexSet.size
                
                if this[.indexSet[indexIndex]] == value then
                    return indexIndex
                endif
                
                set indexIndex = indexIndex + 1
            endloop
            
            return -1
        endmethod
        method iterator takes nothing returns ArrayIterator
            return ArrayIterator.create(this)
        endmethod
        
        static method create takes nothing returns thistype
            local thistype this = allocate()
            
            set .valueList = Table.create()
            set .indexSet = Set.create(true)
            set .size = 0
            return this
        endmethod
        method destroy takes nothing returns nothing
            call .valueList.destroy()
            call .indexSet.destroy()
            call .deallocate()
        endmethod
    endstruct
    
    struct ArrayIterator extends Iterator
        
        private Array arr
        private integer indexIndex
        
        static method create takes Array arr returns thistype
            local thistype this = allocate()
            
            set .arr = arr
            set .indexIndex = -1
            return this
        endmethod
        
        method hasNext takes nothing returns boolean
            return .indexIndex + 1 < .arr.indexSet.size
        endmethod
        method next takes nothing returns integer
            set .indexIndex = .indexIndex + 1
            
            return .arr[.arr.indexSet[.indexIndex]]
        endmethod
        
        method operator index takes nothing returns integer
            if .indexIndex == -1 then
                return -1
            endif
            
            return .arr.indexSet[.indexIndex]
        endmethod
    endstruct
    
    //! textmacro DEFINE_STRUCT_ARRAY takes ACCESS, NAME, TYPE, NAME_DESTROYABLE
        
        $ACCESS$ struct $NAME$ extends array
            
            private delegate Array arr
            
            static method create takes nothing returns thistype
                local thistype this = Array.create()
                set .arr = this
                return this
            endmethod
            method operator [] takes integer index returns $TYPE$
                return .arr[index]
            endmethod
            
            static if $NAME_DESTROYABLE$ then
                method nestedDestroy takes nothing returns nothing
                    local Iterator it = Array(this).iterator()
                    loop
                        exitwhen not it.hasNext()
                        call $TYPE$(it.next()).destroy()
                    endloop
                    call it.destroy()
                    
                    call Array(this).destroy()
                endmethod
            endif
        endstruct
        
    //! endtextmacro

endlibrary